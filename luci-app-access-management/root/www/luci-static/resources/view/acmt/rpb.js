"use strict";"require form";"require fs";"require network";"require poll";"require rpc";"require uci";"require view";"require tools.widgets as widgets";
document.head.append(E('style',{'type':'text/css'},`:root {--app-id-font-color: #454545;--app-id-font-shadow: #fff;--app-id-connected-color: #6bdebb;--app-id-disconnected-color: #f8aeba;--app-id-undefined-color: #dfdfdf;}:root[data-darkmode="true"] {--app-id-font-color: #f6f6f6;--app-id-font-shadow: #4d4d4d;--app-id-connected-color: #005F20;--app-id-disconnected-color: #a93734;--app-id-undefined-color: #4d4d4d;}.id-connected {--on-color: var(--app-id-font-color);background-color: var(--app-id-connected-color) !important;border-color: var(--app-id-connected-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-disconnected {--on-color: var(--app-id-font-color);background-color: var(--app-id-disconnected-color) !important;border-color: var(--app-id-disconnected-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-undefined {--on-color: var(--app-id-font-color);background-color: var(--app-id-undefined-color) !important;border-color: var(--app-id-undefined-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-label-status {display: inline-block;word-wrap: break-word;margin: 2px !important;padding: 4px 8px;border: 1px solid;-webkit-border-radius: 4px;-moz-border-radius: 4px;border-radius: 4px;font-weight: bold;}`));
async function getStatus() {try {const res = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_status');const data = await res.json();return {isRunning: data.running || false,app_pid: data.app_pid || null,ctrl_pid: data.ctrl_pid || null,method: data.method,uci_hash: data.uci_hash,nft_hash: data.nft_hash || []};} catch (e) {return {isRunning: undefined,app_pid: undefined,ctrl_pid: undefined,method: undefined,uci_hash: undefined,nft_hash: []};}}
function renderStatus(statusData) {let html = "";const wasOpen = document.querySelector("#nft-details")?.open || false;if (statusData.isRunning === true) {html += `<p class="id-label-status id-connected"><span class="id-connected"><i>Router Port Blocker RUNNING ${statusData.app_pid ?? ""} ${statusData.ctrl_pid ?? ""}</i></span></p>`;if (statusData.uci_hash) {html += `<p class="id-label-status id-undefined"><span class="id-undefined"><i>UCI HASH: ${statusData.uci_hash}</i></span></p>`;}if (Array.isArray(statusData.nft_hash) && statusData.nft_hash.length > 0) {html += `<details class="id-label-status id-undefined" id="nft-details" style="padding: 6px;"><summary><b><i>NFT HASH (${statusData.nft_hash.length} total) - Click to open</i></b></summary><ul style="margin-top: 6px; padding-left: 20px; list-style-type: disc;">` + statusData.nft_hash.map((hash, idx) =>`<li><code>${idx + 1}. ${hash}</code></li>`).join("") + `</ul></details>`;}} else if (statusData.isRunning === false) {html += `<p class="id-label-status id-disconnected"><span class="id-disconnected"><i>Router Port Blocker NOT RUNNING</i></span></p>`;} else {html += `<p class="id-label-status id-undefined"><span class="id-undefined"><i>Failed to retrieve status (error)</i></span></p>`;}const statusDiv = document.getElementById("rpb_status");if (statusDiv) {statusDiv.innerHTML = html;const newDetails = statusDiv.querySelector("#nft-details");if (wasOpen && newDetails) newDetails.open = true;}}
setTimeout(() => {updateLog();setInterval(updateLog, 200);}, 100);setTimeout(() => {const btn = document.getElementById("reset-log-btn");if (btn) {btn.addEventListener("click", async () => {try {const response = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_reset_log', { method: 'POST' });if (!response.ok) throw new Error("Reset gagal");await updateLog();} catch (err) {alert("Gagal reset log: " + err.message);}});}}, 500);
async function updateLog() {const el = document.getElementById("syslog");if (el) {try {const response = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_log_data', {method: 'GET',headers: { 'Accept': 'text/plain' }});const text = await response.text();const lines = text.trim().split("\n").slice(0, 500);el.value = lines.join("\n");} catch (e) {el.value = "Gagal mengambil log: " + e.message;}}}setTimeout(async () => {const res = await getStatus();renderStatus(res);setInterval(async () => {const res = await getStatus();renderStatus(res)}, 1000);}, 100);
return view.extend({load() {return Promise.all([uci.load("acmt"),getStatus()]);},render(data) {const cfg = data[0];const statusData = data[1];const m = new form.Map("acmt", _("Router Port Blocker"), _("Hotspot & PPPoE Users Blocker to RadMonv2 Gateway Router Port"));const sStatus = m.section(form.TypedSection);sStatus.anonymous = true;sStatus.render = function () {let handled = false;poll.add(async function () {const status = await getStatus();const isRunning = status.isRunning;await uci.load("acmt");const enabled = uci.get("acmt", "main", "enabled");
if (enabled === "1" && !isRunning && !handled) {handled = true;await fetch('/cgi-bin/luci/admin/services/acmt/rpb_start', { method: "POST" });
} else if (enabled === "0" && isRunning && !handled) {handled = true;await fetch('/cgi-bin/luci/admin/services/acmt/rpb_stop', { method: "POST" });
} else if (enabled === "1" && isRunning && !handled) {handled = true;await fetch('/cgi-bin/luci/admin/services/acmt/rpb_restart', { method: "POST" });}
if ((enabled === "0" && !isRunning) || (enabled === "1" && isRunning)) {handled = false;}renderStatus(status);});
return E('div', { class: 'cbi-section' }, [E('div', { id: 'rpb_status' }, [E('p', { class: 'id-label-status id-undefined' }, [E('span', { class: 'id-undefined' }, [E('i', _('Collecting data ...'))])])])]);};const s = m.section(form.NamedSection, "main", "config");s.tab("basic_settings", _("Basic Settings"));let o = s.taboption("basic_settings", form.Flag, "enabled", _("Enabled"));o.default = "0";o.rmempty = false;o = s.taboption("basic_settings", form.Flag, "hs_enabled", _("Hotspot Users Blocker"));o.default = "1";o.rmempty = false;o = s.taboption("basic_settings", form.Flag, "ppp_enabled", _("PPPoE Users Blocker"));o.default = "1";o.rmempty = false;o = s.taboption("basic_settings", form.DynamicList, "ports", _("Ports Black List"), _("Enter the blacklist ports that you do not want users to access"));o.rmempty = true;o.cfgvalue = function (section_id) {var val = uci.get("acmt", section_id, "ports");if (typeof val === "string" && val.trim() !== "") {return val.split(/\s*,\s*|\n/).filter(Boolean);}return [];};o.write = function (section_id, formvalue) {if (Array.isArray(formvalue)) {uci.set("acmt", section_id, "ports", formvalue.map(ip => ip.trim()).join(","));} else if (typeof formvalue === "string") {uci.set("acmt", section_id, "ports", formvalue.trim());}};s.tab("advance_settings", _("Advance Settings"));o = s.taboption("advance_settings", form.Flag, "ip_wl_enabled", _("IP White List"));o.default = "0";o.rmempty = false;o = s.taboption("advance_settings", form.DynamicList, "ip_whitelist", _(""), _("Enter IP address exceptions (optional)"));o.rmempty = true;o.cfgvalue = function (section_id) {var val = uci.get("acmt", section_id, "ip_whitelist");if (typeof val === "string" && val.trim() !== "") {return val.split(/\s*,\s*|\n/).filter(Boolean);}return [];};o.write = function (section_id, formvalue) {if (Array.isArray(formvalue)) {uci.set("acmt", section_id, "ip_whitelist", formvalue.map(ip => ip.trim()).join(","));} else if (typeof formvalue === "string") {uci.set("acmt", section_id, "ip_whitelist", formvalue.trim());}};o = s.taboption("advance_settings", form.Flag, "mac_wl_enabled", _("MAC White List"));o.default = "0";o.rmempty = false;o=s.taboption("advance_settings",form.DynamicList,"mac_whitelist",_(""), _("Enter MAC address exceptions (optional)"));o.rmempty = true;o.cfgvalue = function (section_id) {var val = uci.get("acmt", section_id, "mac_whitelist");if (typeof val === "string" && val.trim() !== "") {return val.split(/\s*,\s*|\n/).filter(Boolean);}return [];};o.write = function (section_id, formvalue) {if (Array.isArray(formvalue)) {uci.set("acmt", section_id, "mac_whitelist", formvalue.map(ip => ip.trim()).join(","));} else if (typeof formvalue === "string") {uci.set("acmt", section_id, "mac_whitelist", formvalue.trim());}};s.tab("logs", _("Logs"));s.taboption("logs", form.DummyValue, "_log_output", "").rawhtml = true;s.taboption("logs", form.DummyValue, "_log_output_box", "").rawhtml = true;s.taboption("logs", form.DummyValue, "_log_output_box", "").cfgvalue = function () {return E("div", {}, [E("textarea", {id: "syslog",style: "font-size:12px; width:100%; height:400px; resize:vertical; overflow:auto;",readonly: "readonly",wrap: "off"}),E("div", { style: "margin-top:10px;"},E("button", {id: "reset-log-btn",class: "cbi-button cbi-button-reset" },_("Reset Log")))]);};return m.render();}});