"use strict";"require form";"require poll";"require uci";"require rpc";"require view";
document.head.append(E('style',{'type':'text/css'},`:root {--app-id-font-color: #454545;--app-id-font-shadow: #fff;--app-id-connected-color: #6bdebb;--app-id-disconnected-color: #f8aeba;--app-id-undefined-color: #dfdfdf;}:root[data-darkmode="true"] {--app-id-font-color: #f6f6f6;--app-id-font-shadow: #4d4d4d;--app-id-connected-color: #005F20;--app-id-disconnected-color: #a93734;--app-id-undefined-color: #4d4d4d;}.id-connected {--on-color: var(--app-id-font-color);background-color: var(--app-id-connected-color) !important;border-color: var(--app-id-connected-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-disconnected {--on-color: var(--app-id-font-color);background-color: var(--app-id-disconnected-color) !important;border-color: var(--app-id-disconnected-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-undefined {--on-color: var(--app-id-font-color);background-color: var(--app-id-undefined-color) !important;border-color: var(--app-id-undefined-color) !important;color: var(--app-id-font-color) !important;text-shadow: 0 1px 1px var(--app-id-font-shadow);}.id-label-status {display: inline-block;word-wrap: break-word;margin: 2px !important;padding: 4px 8px;border: 1px solid;-webkit-border-radius: 4px;-moz-border-radius: 4px;border-radius: 4px;font-weight: bold;}`));
async function getStatus() {try {const res = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_status');const data = await res.json();return {isRunning: data.running || false,app_pid: data.app_pid || null,ctrl_pid: data.ctrl_pid || null,method: data.method,uci_hash: data.uci_hash,nft_hash: data.nft_hash || []};} catch (e) {return {isRunning: undefined,app_pid: undefined,ctrl_pid: undefined,method: undefined,uci_hash: undefined,nft_hash: []};}}
function renderStatus(statusData) {let html = "";if (statusData.isRunning === true) {html += `<p class="id-label-status id-connected"><span class="id-connected"><i>Router Port Blocker RUNNING ${statusData.app_pid ?? ""} ${statusData.ctrl_pid ?? ""}</i></span></p>`;if (statusData.uci_hash) {html += `<p class="id-label-status id-undefined"><span class="id-undefined"><i>UCI HASH: ${statusData.uci_hash}</i></span></p>`;}if (Array.isArray(statusData.nft_hash) && statusData.nft_hash.length > 0) {html += `<details class="id-label-status id-undefined" id="nft-details" style="padding: 6px;"><summary><b><i>NFT HASH (${statusData.nft_hash.length} total) - Click to open</i></b></summary><ul style="margin-top: 6px; padding-left: 20px; list-style-type: disc;">` + statusData.nft_hash.map((hash, idx) =>`<li><code>${idx + 1}. ${hash}</code></li>`).join("") + `</ul></details>`;}} else if (statusData.isRunning === false) {html += `<p class="id-label-status id-disconnected"><span class="id-disconnected"><i>Router Port Blocker NOT RUNNING</i></span></p>`;} else {html += `<p class="id-label-status id-undefined"><span class="id-undefined"><i>Failed to retrieve status</i></span></p>`;}return html;}
function getActivePorts() {return fetch('/cgi-bin/luci/admin/services/acmt/rpb_active_ports').then(res => res.json()).then(data => {if (data && Array.isArray(data.result))return data.result; else return [];}).catch(() => {return [];});}
async function allActivePorts() {const activePorts = await getActivePorts();let configPorts = [];uci.sections("acmt", "acmt", function (section) {if (section.ports) {section.ports.split(",").forEach(p => {p = p.trim();if (p && !configPorts.includes(p)) {configPorts.push(p);}});}});let allPorts = [...new Set([...activePorts, ...configPorts])];if (allPorts.length === 0) {allPorts = ["not_found"];}return allPorts;}
async function checkUciHashChanged() {try {const res = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_compare_hash');const data = await res.json();return data.changed === true;} catch (e) {console.error("Gagal cek hash:", e);return false;}}
async function callGetWhitelist() {try {const res = await fetch('/cgi-bin/luci/admin/services/acmt/rpb_active_radacct');if (!res.ok) throw new Error("HTTP error " + res.status);const data = await res.json();return data;} catch (e) {console.error("Gagal ambil whitelist:", e);return { iplist: '', maclist: '', namelist: '' };}}
return view.extend({load: function () {return Promise.all([uci.load("acmt"),getStatus(),allActivePorts(),callGetWhitelist()]);},render: function (data) {let m,s,o;const cfg = data[0];const statusData = data[1];const allActivePorts = data[2];const wl = data[3] || {};m = new form.Map("acmt", _("Router Port Blocker"), _("Hotspot & PPPoE Users Blocker to RadMonv2 Gateway Router Port"));s = m.section(form.TypedSection, '_status', _('Status'));s.anonymous = true;s.render = function () {poll.add(async function () {const res = await getStatus();const wasOpen = document.querySelector("#nft-details")?.open || false;const statusDiv = document.getElementById("rpb_status");if (statusDiv) {statusDiv.innerHTML = renderStatus(res);const newDetails = statusDiv.querySelector("#nft-details");if (wasOpen && newDetails) newDetails.open = true;}});return E('div', { class: 'cbi-section' }, [E('div', { id: 'rpb_status' }, [E('p', { class: 'id-label-status id-undefined' }, [E('span', { class: 'id-undefined' }, [E('img', { src: '/luci-static/resources/view/acmt/img/loading.gif', style: 'width:14px; height:14px; vertical-align:middle; margin-right:5px;'}), E('i', _('Collecting data ...'))])])])]);};s = m.section(form.NamedSection, 'main', 'acmt');s.anonymous = false;s.addremove = false;s.tab('general', _('General'));s.tab('whitelist', _('White List'));s.tab('db', _('Data Base'));o = s.taboption("general", form.Flag, "enabled", _("Enable"));o.default = "0";o.rmempty = false;o = s.taboption("general", form.Flag, "hs_enabled", _("Hotspot Users Blocker"));o.default = "0";o.rmempty = false;o = s.taboption("general", form.Flag, "ppp_enabled", _("PPPoE Users Blocker"));o.default = "0";o.rmempty = false;o = s.taboption("general", form.MultiValue, "ports", _("Ports Blacklist"), _("Select one or more ports to block"));allActivePorts.forEach(function (port) {o.value(port, port);});o.value = function(value, title) {var option = E('option', { value: value }, title);if (value === "not_found" || value === "3990" || value === "4990" || value === "3306" || value === "5353" || value === "53") {option.setAttribute('disabled', 'disabled');option.textContent += " (not selectable)";}return option;};o.cfgvalue = function (section_id) {var val = uci.get("acmt", section_id, "ports");if (typeof val === "string" && val.trim() !== "") {let arr = val.split(",").map(function (p) { return p.trim(); });return arr.filter(p => p !== "not_found" && p !== "3990" && p !== "4990" && p !== "3306" && p !== "5353" && p !== "53");}return [];};o.write = function (section_id, formvalue) {if (Array.isArray(formvalue)) {formvalue = formvalue.filter(p => p !== "not_found" && p !== "3990" && p !== "4990" && p !== "3306" && p !== "5353" && p !== "53");if (formvalue.length === 0) {uci.set("acmt", section_id, "ports", "");} else {uci.set("acmt", section_id, "ports", formvalue.join(","));}} else if (typeof formvalue === "string") {if (formvalue.trim() === "" || formvalue === "not_found" || formvalue === "3990" || formvalue === "4990" || formvalue === "3306" || formvalue === "5353" || formvalue === "53") {uci.set("acmt", section_id, "ports", "");} else {uci.set("acmt", section_id, "ports", formvalue);}}};o = s.taboption('general',form.ListValue,'app_loop',_('APP Loop'),_('APP Loop to control the CTRL process and for MAC Whitelist updates in seconds. If no need, leave the default: 15 seconds.'));o.value('10',_('10 Sec'));o.value('15',_('15 Sec'));o.value('20',_('20 Sec'));o.value('25',_('25 Sec'));o.value('30',_('30 Sec'));o.default='15';o.rmempty=false;o = s.taboption('general',form.ListValue,'ctrl_loop',_('CTRL Loop'),_('CTRL Loop to control the APP process in seconds. If not needed, leave the default: 3 seconds.'));o.value('3',_('3 Sec'));o.value('5',_('5 Sec'));o.value('10',_('10 Sec'));o.default='15';o.rmempty=false;o = s.taboption("whitelist", form.Flag, "ip_wl_enabled", _("IP Whitelist Enable"));o.default = "0";o.rmempty = false;o = s.taboption('whitelist', form.DynamicList, 'ip_whitelist', _('IP Whitelist'), _('Enter and select the exception IP address you want to unblock.'));o.rmempty = true;let existingIPs = [];try {let val = uci.get('acmt', section_id, 'ip_whitelist') || '';existingIPs = (typeof val === 'string' && val.trim() !== '') ? val.split(/\s*,\s*|\n/).filter(Boolean) : [];} catch(e) { existingIPs = []; }if (wl.iplist && wl.iplist.trim() !== '') {wl.iplist.split(/\s*,\s*/).filter(Boolean).forEach(function(ip) {if (!existingIPs.includes(ip.trim())) {o.value(ip, ip);}});}o.cfgvalue = function(section_id) {var uciVal = uci.get('acmt', section_id, 'ip_whitelist') || '';return (typeof uciVal === 'string' && uciVal.trim() !== '') ? uciVal.split(/\s*,\s*|\n/).filter(Boolean) : [];};o.write = function(section_id, formvalue) {if (Array.isArray(formvalue)) {uci.set('acmt', section_id, 'ip_whitelist', formvalue.map(ip => ip.trim()).join(','));} else if (typeof formvalue === 'string') {uci.set('acmt', section_id, 'ip_whitelist', formvalue.trim());}};o.validate = function(section_id, value) {if (!value) return true;var ips = Array.isArray(value) ? value : value.split(/\s*,\s*/);var re = /^(25[0-5]|2[0-4]\d|[01]?\d?\d)\.(25[0-5]|2[0-4]\d|[01]?\d?\d)\.(25[0-5]|2[0-4]\d|[01]?\d?\d)\.(25[0-5]|2[0-4]\d|[01]?\d?\d)$/;for (var i = 0; i < ips.length; i++) {if (!re.test(ips[i].trim())) return _('Invalid IP format: ') + ips[i];}return true;};o = s.taboption("whitelist", form.Flag, "mac_wl_enabled", _("MAC Whitelist Enable"));o.default = "0";o.rmempty = false;o = s.taboption('whitelist', form.DynamicList, 'mac_whitelist', _('MAC Whitelist'), _('Enter and select the MAC address exceptions you want to unblock.'));o.rmempty = true;let existingMACs = [];try {let val = uci.get('acmt', section_id, 'mac_whitelist') || '';existingMACs = (typeof val === 'string' && val.trim() !== '') ? val.split(/\s*,\s*|\n/).filter(Boolean).map(m => m.toUpperCase().replace(/-/g, ':')) : [];} catch(e) { existingMACs = []; }if (wl.maclist && wl.maclist.trim() !== '') {wl.maclist.split(/\s*,\s*/).filter(Boolean).forEach(function(mac) {mac = mac.toUpperCase().replace(/-/g, ':');if (!existingMACs.includes(mac)) {o.value(mac, mac);}});}o.cfgvalue = function(section_id) {var uciVal = uci.get('acmt', section_id, 'mac_whitelist') || '';return (typeof uciVal === 'string' && uciVal.trim() !== '') ? uciVal.split(/\s*,\s*|\n/).filter(Boolean).map(x => x.toUpperCase().replace(/-/g, ':')) : [];};o.write = function(section_id, formvalue) {if (Array.isArray(formvalue)) {uci.set('acmt', section_id, 'mac_whitelist',formvalue.map(mac => mac.trim().toUpperCase().replace(/-/g, ':')).join(','));} else if (typeof formvalue === 'string') {uci.set('acmt', section_id, 'mac_whitelist', formvalue.trim().toUpperCase().replace(/-/g, ':'));}};o.validate = function(section_id, value) {if (!value) return true;var macs = Array.isArray(value) ? value : value.split(/\s*,\s*/);var re = /^([0-9A-Fa-f]{2}[:-]){5}[0-9A-Fa-f]{2}$/;for (var i = 0; i < macs.length; i++) {var mac = macs[i].trim();if (!re.test(mac)) return _('Invalid MAC format: ') + mac;}return true;};o = s.taboption('db', form.Value, 'db_server', _('DB Server'));o = s.taboption('db', form.Value, 'mysql_port', _('MySQL Port'));o = s.taboption('db', form.Value, 'db_user', _('DB User'));o = s.taboption('db', form.Value, 'db_pass', _('DB Pass'));o = s.taboption('db', form.Value, 'db_name', _('DB Name'));let handled = false;
document.addEventListener("click", async function (e) {const li = e.target.closest('.cbi-button-apply li[data-value="0"]');if (!li) return;await new Promise(resolve => setTimeout(resolve, 4000));const uciChanges = document.querySelector('#indicators [data-indicator="uci-changes"]');const hasUnsavedChanges = uciChanges && uciChanges.getAttribute("data-style") === "active";if (!hasUnsavedChanges) return;const enabled = uci.get("acmt", "main", "enabled");const status = await getStatus();if (enabled === "1" && !status.isRunning && !handled) {handled = true;fetch('/cgi-bin/luci/admin/services/acmt/rpb_start', { method: "POST" });} else if (enabled === "0" && status.isRunning && !handled) {handled = true;fetch('/cgi-bin/luci/admin/services/acmt/rpb_stop', { method: "POST" });} else if (enabled === "1" && status.isRunning && !handled) {const changed = await checkUciHashChanged();if (changed) {handled = true;fetch('/cgi-bin/luci/admin/services/acmt/rpb_restart', { method: "POST" });}}if ((enabled === "1" && status.isRunning) || (enabled === "0" && !status.isRunning)) {handled = false;}});return m.render();}});