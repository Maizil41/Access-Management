'use strict';'require view';'require poll';'require ui';
let viewInstance = null;let currentLogType = 'rpb';
function getLogEndpoint() {if (currentLogType === 'rpb')return '/cgi-bin/luci/admin/services/acmt/rpb_log_data'; else return '/cgi-bin/luci/admin/services/acmt/uhttpd_log_data';}
function getResetEndpoint() {if (currentLogType === 'rpb')return '/cgi-bin/luci/admin/services/acmt/rpb_reset_log'; else return null;}
function smoothScroll(element, target) {const start = element.scrollTop;const change = target - start;const duration = 650;const startTime = performance.now();function animate(currentTime) {const elapsed = currentTime - startTime;const progress = Math.min(elapsed / duration, 1);const ease = 1 - Math.pow(1 - progress, 3);element.scrollTop = start + change * ease;if (progress < 1) requestAnimationFrame(animate);}requestAnimationFrame(animate);}
async function animateClear(logDiv) {return new Promise(resolve => {let lines = logDiv.value.split("\n");const total = lines.length;let step = 1;if (total > 500) step = 20;else if (total > 100) step = 10;else if (total > 50) step = 5;logDiv.scrollTop = logDiv.scrollHeight;const interval = setInterval(() => {lines = lines.slice(0, -step);logDiv.value = lines.join("\n");logDiv.scrollTop = logDiv.scrollHeight;if (lines.length === 0) {clearInterval(interval);resolve();}}, 30);});}
async function resetLog() {const btn = document.getElementById("clearLogButton");const logDiv = document.getElementById("syslog");if (!btn || !logDiv) {ui.addNotification(null,E("p",{},_("⚠️ Button/textarea not found.")));/*alert("⚠️ Button/textarea not found.")*/;return;}try {const endpoint = getResetEndpoint();if (!endpoint) {ui.addNotification(null,E("p",{},_("⚠️ Reset not available for " + currentLogType + " logs")));/*alert("⚠️ Reset not available for " + currentLogType + " logs")*/;return;}const response = await fetch(endpoint, { method: 'POST' });if (!response.ok) throw new Error("Failed to clear log");await animateClear(logDiv);} catch (err) {ui.addNotification(null,E("p",{},_("⚠️ error: " + err.message)));/*alert("⚠️ error: " + err.message);*/}}
return view.extend({async retrieveLog() {try {const res = await fetch(getLogEndpoint());if (!res.ok) throw new Error(`Failed to retrieve logs. Status: (HTTP ${res.status})`);const logdata = await res.text();const loglines = logdata.trim().split("\n").slice(0, 500);return { value: loglines.join('\n'), rows: loglines.length + 1 };} catch (err) {return { value: 'Error: ' + err.message, rows: 1 };}},
async pollLog() {const element = document.getElementById('syslog');if (element) {try {const log = await this.retrieveLog();element.value = log.value;const indicator = document.getElementById("logIndicator");if (indicator) indicator.innerText = `📌 Current: ${currentLogType.toUpperCase()} Logs`;const rpbBtn = document.getElementById("rpbButton");const uhttpdBtn = document.getElementById("uhttpdButton");if (rpbBtn && uhttpdBtn) {if (currentLogType === 'rpb') {rpbBtn.className = "cbi-button cbi-button-action";uhttpdBtn.className = "cbi-button cbi-button-neutral";} else {rpbBtn.className = "cbi-button cbi-button-neutral";uhttpdBtn.className = "cbi-button cbi-button-action";}}} catch (err) {ui.addNotification(null,E('p', {}, _('Unable to load log data: ' + err.message)));}}},load() {poll.add(this.pollLog.bind(this));return this.retrieveLog();},render(loglines) {viewInstance = this;const rpbButton = E('button', {id: 'rpbButton',style: 'margin-right:5px',class: (currentLogType === 'rpb') ? 'cbi-button cbi-button-action': 'cbi-button cbi-button-neutral'}, _('RPB Logs'));const uhttpdButton = E('button', {id: 'uhttpdButton',style: 'margin-right:5px',class: (currentLogType === 'uhttpd') ? 'cbi-button cbi-button-action': 'cbi-button cbi-button-neutral'}, _('uHTTPd Logs'));rpbButton.addEventListener('click', async () => {currentLogType = 'rpb';await this.pollLog();scrollToggleButton.innerText = "Scroll to tail";scrollToggleButton.dataset.mode = "tail";});uhttpdButton.addEventListener('click', async () => {currentLogType = 'uhttpd';await this.pollLog();scrollToggleButton.innerText = "Scroll to tail";scrollToggleButton.dataset.mode = "tail";});const logIndicator = E('div', {id: 'logIndicator',style: 'margin: 8px 0 20px 0; font-weight:bold; color:#2d6cdf'}, `📌 Current: ${currentLogType.toUpperCase()} Logs`);const scrollToggleButton = E('button', {id: 'scrollToggleButton', class: 'cbi-button cbi-button-neutral',}, _('Scroll to tail'));scrollToggleButton.dataset.mode = "tail";scrollToggleButton.addEventListener('click', () => {const logDiv = document.getElementById("syslog");if (!logDiv) return;if (scrollToggleButton.dataset.mode === "tail") {smoothScroll(logDiv, logDiv.scrollHeight);} else {smoothScroll(logDiv, 0);}});function updateScrollButton() {const logDiv = document.getElementById("syslog");if (!logDiv) return;const isAtBottom = Math.abs(logDiv.scrollHeight - logDiv.scrollTop - logDiv.clientHeight) < 5;const isAtTop = logDiv.scrollTop === 0;if (isAtBottom) {scrollToggleButton.innerText = "Scroll to head";scrollToggleButton.dataset.mode = "head";} else if (isAtTop) {scrollToggleButton.innerText = "Scroll to tail";scrollToggleButton.dataset.mode = "tail";}}const clearLogButton = E('button', {id: 'clearLogButton', class: 'cbi-button cbi-button-reset', style: 'margin: 0;'}, _('Clear Log'));clearLogButton.addEventListener('click', resetLog);const textarea = E('textarea', {id: 'syslog', style: 'font-size:12px; width:100%; height:400px; resize:vertical; overflow:auto;', readonly: 'readonly',  wrap: 'off', rows: loglines.rows,}, [loglines.value]);textarea.addEventListener("scroll", updateScrollButton);updateScrollButton();return E([], [E('div', { id: 'content_syslog' }, [E('div', { style: 'padding-top: 10px;' }, [rpbButton, uhttpdButton]), logIndicator, E('div', {style: 'padding-bottom: 5px; display: flex; justify-content: space-between;'}, [scrollToggleButton, clearLogButton]), textarea])])},handleSaveApply: null,handleSave: null,handleReset: null});